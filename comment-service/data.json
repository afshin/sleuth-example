[
  {
    "guid": "375e5c00-852d-49c3-8b99-4f29e8408c49",
    "article": "39231b95-0e78-4f98-9147-5022aa2f7e94",
    "text": "I recently found out about Redux:\u003cp\u003e\u003ca href=\"https:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;redox-os\u0026#x2F;redox\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;redox-os\u0026#x2F;redox\u003c/a\u003e\u003cp\u003eIt\u0026#x27;s pretty incredible how quickly it\u0026#x27;s come together, there\u0026#x27;s a reasonable looking GUI already!\u003cp\u003eEdit: The author also did an AMA on reddit: \u003ca href=\"https:\u0026#x2F;\u0026#x2F;www.reddit.com\u0026#x2F;r\u0026#x2F;rust\u0026#x2F;comments\u0026#x2F;3mw67c\u0026#x2F;i_am_jackpot51_the_writer_of_redox_a_rust\u0026#x2F;\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;www.reddit.com\u0026#x2F;r\u0026#x2F;rust\u0026#x2F;comments\u0026#x2F;3mw67c\u0026#x2F;i_am_jackpot51...\u003c/a\u003e",
    "time": 1445806735
  },
  {
    "guid": "4096ebe0-5ab5-491d-a999-ef38de8e04a2",
    "article": "39231b95-0e78-4f98-9147-5022aa2f7e94",
    "text": "As far as I can tell, Rust OS projects generally use gratuitous amounts of unsafe code and are not substantially different than if they were written in C. I could just be looking in the wrong places. Are there any that take advantage of Rust\u0026#x27;s type system to provide real guarantees?",
    "time": 1445808206
  },
  {
    "guid": "dfee04f3-53c5-4d13-aeea-38ac5554fe5b",
    "article": "39231b95-0e78-4f98-9147-5022aa2f7e94",
    "text": "I\u0026#x27;d like to see someone re-implement the QNX real-time microkernel in Rust.  That would be useful. We need a QNX-like OS for embedded devices.  Linux is really the wrong tool for the job.  Too much extra stuff which allows attacks.",
    "time": 1445813348
  },
  {
    "guid": "f0606b49-d3ce-41f4-af8f-f338131d161d",
    "article": "39231b95-0e78-4f98-9147-5022aa2f7e94",
    "text": "If anyone is considering working on an OS in Rust, they could perhaps consider writing a small hypervisor that could replace Xen, Nova and similar hypervisors.\u003cp\u003eThis provides the same low-level challenges of writing a kernel, but it\u0026#x27;s far easier to get practically usable software than attempting to replace Linux and would actually be useful in practice.\u003cp\u003eAt the moment, the only way to make a sandbox that has a chance of being perfectly secure (i.e. no security holes, ever) while still running all kinds of useful software is to use VMs to sandbox Linux\u0026#x2F;Windows kernels, and here the hypervisor is of course the weak point, and current usable hypervisors are written in C or C++.",
    "time": 1445849922
  },
  {
    "guid": "694c773a-3ed6-4b34-b800-7b9666cedffc",
    "article": "39231b95-0e78-4f98-9147-5022aa2f7e94",
    "text": "\u003ca href=\"https:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;flosse\u0026#x2F;rust-os-comparison\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;flosse\u0026#x2F;rust-os-comparison\u003c/a\u003e",
    "time": 1445803586
  },
  {
    "guid": "9848ead0-97b0-49db-beae-67e371b44916",
    "article": "39231b95-0e78-4f98-9147-5022aa2f7e94",
    "text": "I\u0026#x27;ve read through what was here, and last night, actually built the first post\u0026#x27;s code. I really like the depth and style of this particular posts, it really hits a sweet spot.",
    "time": 1445809958
  },
  {
    "guid": "3fce404b-158b-4d11-887b-91164364e1d4",
    "article": "39231b95-0e78-4f98-9147-5022aa2f7e94",
    "text": "Relevant: \u003ca href=\"https:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;wbthomason\u0026#x2F;ironkernel\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;wbthomason\u0026#x2F;ironkernel\u003c/a\u003e",
    "time": 1445807521
  },
  {
    "guid": "1688aa48-03d7-4b4c-adbd-bbdf25496a93",
    "article": "39231b95-0e78-4f98-9147-5022aa2f7e94",
    "text": "I was looking for something similar in C. Most of the resources I found (eg : os dev-wiki) do not cover the implementation details in such depth. Can anyone give few pointers?",
    "time": 1445842853
  },
  {
    "guid": "6d609dd3-d94f-4e87-946c-3041f0840099",
    "article": "39231b95-0e78-4f98-9147-5022aa2f7e94",
    "text": "No -mno-redzone?",
    "time": 1445813301
  },
  {
    "guid": "fa7d704f-5869-4708-945c-4c595602b780",
    "article": "39231b95-0e78-4f98-9147-5022aa2f7e94",
    "text": "What\u0026#x27;s the value and novelty of writing an OS in Rust?",
    "time": 1445813213
  },
  {
    "guid": "956b7734-9e99-4bf8-9280-c899b21d50b7",
    "article": "4e3f3d94-e6e5-40d6-9fb6-e3a14afce096",
    "text": "\u0026gt; \u003ci\u003eEach rover has its own set of photos stored in the database, which can be queried separately. There are several possible queries that can be made against the API. Photos are organized by the sol (Martian rotation or day) on which they were taken, counting up from the rover\u0026#x27;s landing date. A photo taken on Curiosity\u0026#x27;s 1000th Martian sol exploring Mars, for example, will have a sol attribute of 1000. If instead you prefer to search by the Earth date on which a photo was taken, you can do that too.\u003c/i\u003e\u003cp\u003eSo when do codebases for `strftime()` functions get extended to deal with extraterrestrial timezones?",
    "time": 1449595777
  },
  {
    "guid": "f36ad917-eb38-4c7e-8cb1-e0f3e96ecb5b",
    "article": "4e3f3d94-e6e5-40d6-9fb6-e3a14afce096",
    "text": "\u0026gt; Sounds (beta)\u003cp\u003e\u0026gt; Sound exists in space. Sometimes. And NASA has released a series of space sounds via sound cloud. We have abstracted away some of the hassle in accessing these sounds, so that developers can play with the audio files. For example, a useful application would be an automatic filter to identify human voices in these audio files. For now, that would help identify content. Later, however, when we retrieve sounds from far-off planets, we can apply the filter to identify unknown human space colonies. That was a joke. Sort of.\u003cp\u003e\u003ca href=\"https:\u0026#x2F;\u0026#x2F;api.nasa.gov\u0026#x2F;api.html#sounds\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;api.nasa.gov\u0026#x2F;api.html#sounds\u003c/a\u003e",
    "time": 1449668654
  },
  {
    "guid": "aa87fe34-5027-4b62-9be2-00644690dcb6",
    "article": "4e3f3d94-e6e5-40d6-9fb6-e3a14afce096",
    "text": "Cool - data sets around Landsat 8, APOD, Near-earth Asteroids, Mars rover photos, the NASA patent library, even historical audio recordings. Hope they keep adding to it!\u003cp\u003eWish they had something for the ISS for example - experiment feeds, positioning, historical activity etc - or is that found elsewhere?",
    "time": 1449666602
  },
  {
    "guid": "9eb9ab94-9aa5-4509-831d-0de2bc14ee86",
    "article": "4e3f3d94-e6e5-40d6-9fb6-e3a14afce096",
    "text": "Looks like they use \u003ca href=\"https:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;tripit\u0026#x2F;slate\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;tripit\u0026#x2F;slate\u003c/a\u003e",
    "time": 1449676308
  },
  {
    "guid": "2978dc86-eb55-4367-b435-b29d3aa8d8e2",
    "article": "4e3f3d94-e6e5-40d6-9fb6-e3a14afce096",
    "text": "Very cool. Anyone has ideas on how this data can be used, what kind of applications can be built with this?",
    "time": 1449685684
  },
  {
    "guid": "1c599562-32e4-487b-87f9-56d97680beec",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u003ci\u003eWriting correct code at scale is essentially impossible. We have multiple operating systems, runtimes, libraries, and hardware platforms to worry about without even considering things like random bit flips in RAM or our block devices lying to us with unknown probability.\u003c/i\u003e\u003cp\u003e\u003ci\u003eThe best we can do is write simple, understandable code with as few indirections and as little undocumented magic as possible.\u003c/i\u003e\u003cp\u003eApplies very well to all programming.",
    "time": 1452255575
  },
  {
    "guid": "4ec1573f-c6a7-4b5e-b991-239431886cbd",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt;The first rule of C is don\u0026#x27;t write C if you can avoid it.\u003cp\u003eMan, this is just lame. C is a really nice, useful language, especially if you learn the internals. It requires discipline and care to use effectively, but it can be done right. The problem is that a lot of C programmers only know C and can\u0026#x27;t apply higher level concepts or abstractions to it because they\u0026#x27;ve never learned anything else. This makes their code harder to maintain and easier to break.",
    "time": 1452257326
  },
  {
    "guid": "adf0a432-f1a9-4c4b-9d97-8236c33a2fe1",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Some of this seems like horrendously bad advice:\u003cp\u003e- Using fixed width integers in for loops seems like a fabulous way to reduce the portability of code\u003cp\u003e- the statements in \u0026quot;C allows static initialization of stack-allocated arrays\u0026quot; are _not_ equivalent, one is a bitwise zeroing while the other is arithmetic initialization. On some machines changing these statements blindly will cause a different bit pattern to end up in memory (because there are no requirements on the machine\u0026#x27;s representations for e.g. integers or NULL or ..). There are sound reasons why the bitwise approach could be preferred, for example, because a project has debug wrappers for memset that clearly demarcate uninitialized data\u003cp\u003e- the statements in \u0026quot;C99 allows variable length array initializsers\u0026quot; aren\u0026#x27;t even slightly equivalent. His suggestion uses automatic storage (and subsequently a stack overflow triggered by user input -- aka. a security bug)\u003cp\u003e- \u0026quot;There is no performance penalty for getting zero\u0026#x27;d memory\u0026quot; this is bullshit. calloc() might optimize for the case where it is allocating from a page the OS has just supplied but I doubt any implementation ever bothered to do this, since it relies on the host OS to always zero new pages\u003cp\u003e- \u0026quot;If a function accepts arbitrary input data and a length to process, don\u0026#x27;t restrict the type of the parameter.\u0026quot; the former version is in every way more self-documenting and consistent with the apparent function of the procedure than his use of void\u003ci\u003e. It also runs counter to a rule from slightly more conservative times: avoid void\u003c/i\u003e at all costs, since it automatically silences all casting warnings.\u003cp\u003eModern C provides a bunch of new things that make typing safer but none of those techniques are mentioned here. For example word-sized structs combined with struct literals can eliminate whole classes of historical bugs.\u003cp\u003eOn the fixed width integers thing, the size of \u0026#x27;int\u0026#x27;, \u0026#x27;long\u0026#x27; and \u0026#x27;long long\u0026#x27; are designed to vary according to the machine in use. On some fancy Intel box perhaps there is no cost to using a 64bit type all the time, but on a microcontroller you\u0026#x27;ve just caused the compiler to inject a software arithmetic implementation into your binary (and your code is running 100x slower too). He doesn\u0026#x27;t even mention types like intfast_t designed for this case, despite explicitly indicating \u0026quot;don\u0026#x27;t write C if you have to\u0026quot;, which in 2016 pretty commonly means you\u0026#x27;re targeting such a device",
    "time": 1452259003
  },
  {
    "guid": "5c5f472a-8593-46b1-ae51-1db88e0e711e",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "The author linked to this site: \u003ca href=\"https:\u0026#x2F;\u0026#x2F;www.securecoding.cert.org\u0026#x2F;confluence\u0026#x2F;display\u0026#x2F;c\u0026#x2F;SEI+CERT+C+Coding+Standard\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;www.securecoding.cert.org\u0026#x2F;confluence\u0026#x2F;display\u0026#x2F;c\u0026#x2F;SEI+C...\u003c/a\u003e\u003cp\u003eThese are wonderful. Concise nuggets of knowledge that you can keep in your head, little warnings of what not to do.\u003cp\u003eSide note, it\u0026#x27;s really fun reading this article about modern C given that I\u0026#x27;m working on an experimental programming language meant to replace C [1]. Just today I got the Guess Number Game example working, without a dependency on libc [2] (caveat: Linux x86_64 only so far). So, I\u0026#x27;m having fun trying to think about how C could be better, reading implementations of various libc functions, and writing my own \u0026quot;standard library\u0026quot;.\u003cp\u003eFor example, in my language, there are no `int`, `unsigned char`, `short` types, there are only `i32`, `u8`, `i16`, etc (I shamelessly stole this idea from Rust). This mirrors the article\u0026#x27;s suggestion to only use int32_t, uint8_t, int16_t, etc. But, since it\u0026#x27;s a new programming language, we don\u0026#x27;t have the other types sitting there as a red herring.\u003cp\u003e[1]: \u003ca href=\"https:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;andrewrk\u0026#x2F;zig\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;andrewrk\u0026#x2F;zig\u003c/a\u003e\u003cp\u003e[2]: \u003ca href=\"https:\u0026#x2F;\u0026#x2F;gist.github.com\u0026#x2F;andrewrk\u0026#x2F;131e6f48a15c42fc5ca8\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;gist.github.com\u0026#x2F;andrewrk\u0026#x2F;131e6f48a15c42fc5ca8\u003c/a\u003e",
    "time": 1452257673
  },
  {
    "guid": "1c5edd38-35e2-46d0-b8ba-00983612be53",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Most of this advice is pretty standard, but this stood out:\u003cp\u003e\u0026gt; You should always use calloc. There is no performance penalty for getting zero\u0026#x27;d memory.\u003cp\u003eBut isn\u0026#x27;t there? This may be true the first time the program requests a new page from the OS, but when your program starts reusing memory there\u0026#x27;s going to be a performance hit.",
    "time": 1452255244
  },
  {
    "guid": "7217b76f-21aa-40f4-a421-dfd8178d249a",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Terrible\u003cp\u003eThe first rule of C is to ALWAYS use C\u003cp\u003eThe second rule of C is to NEVER use [u]intN_t, use [u]int_leastN_t instead and (unsigned) char when you want to deal with bytes\u003cp\u003eThe 3rd rule of C is to never use anything else when size_t should be used\u003cp\u003eThe 4th rule of C is that everyone has his own style, so declaring variables on top is totally acceptable (and more clean IMO)\u003cp\u003eThe 5th rule of C is \u0026quot;enjoy your stack overflow\u0026quot; when using VLAs instead of malloc (not to mention that VLAs are optional in C11)\u003cp\u003e\u0026gt;which also means it\u0026#x27;s capable of holding the largest memory offset in your program.\u003cp\u003ewrong\u003cp\u003e\u0026gt;C99 gives us the power of \u0026lt;stdbool.h\u0026gt; which defines true to 1 and false to 0\u003cp\u003eI do use it but it is useless\u003cp\u003e\u0026gt;readability-braces-around-statements — force all if\u0026#x2F;while\u0026#x2F;for statement bodies to be enclosed in braces\u003cp\u003edon\u0026#x27;t use a shitty editor\u003cp\u003e\u0026gt;You should always use calloc\u003cp\u003egood thing calloc has: checks for overflows when multiplying the typesize and the arraylen\u003cp\u003ebad thing: makes programmers think that it will make your pointers null\u003cp\u003e\u0026gt;you can wrap it with #define mycalloc(N) calloc(1, N).\u003cp\u003ebut the two arguments is the only good thing calloc has\u003cp\u003e\u0026gt;growthOptional\u003cp\u003eI can\u0026#x27;t see any reason why the second one is considered better",
    "time": 1452266052
  },
  {
    "guid": "d72e6915-b953-4b22-9443-3e3dc99bd88e",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "It\u0026#x27;s a bit sad that the formatting API hasn\u0026#x27;t improved in C over the years. Take this code, for example:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  printf(\u0026quot;Local number: %\u0026quot; PRIdPTR \u0026quot;\\n\\n\u0026quot;, someIntPtr);\n\u003c/code\u003e\u003c/pre\u003e\nwhich is quite unreadable to say the least. To address this issue I even wrote a small library (\u003ca href=\"https:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;cppformat\u0026#x2F;cppformat\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;cppformat\u0026#x2F;cppformat\u003c/a\u003e) that allows you to write something like this instead:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  print(\u0026quot;Local number: {}\\n\\n\u0026quot;, someIntPtr);\n\u003c/code\u003e\u003c/pre\u003e\nIt is written in C++ rather than C, because the latter doesn\u0026#x27;t have facilities (at least overloading is necessary) to implement such library.",
    "time": 1452271453
  },
  {
    "guid": "d76300f6-0ffb-4ace-a3c8-2cbb4ab4ae48",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "The article says not to do this:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  uint32_t numbers[64];\n  memset(numbers, 0, sizeof(numbers) * 64);\n\u003c/code\u003e\u003c/pre\u003e\nThat is certainly true because that is a buffer overrun.",
    "time": 1452262684
  },
  {
    "guid": "afeb72a3-61cc-490d-94f9-16c37cbb9b0d",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "I recently wrote a similar article (\u0026quot;C Programming Substance Guide\u0026quot;)[1] which made the rounds here[2]. I\u0026#x27;ve updated and improved it quite a bit since then too. It seems like we agree on the major points but it might be a good second opinion.\u003cp\u003e[1] \u003ca href=\"https:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;btrask\u0026#x2F;stronglink\u0026#x2F;blob\u0026#x2F;master\u0026#x2F;SUBSTANCE.md\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;btrask\u0026#x2F;stronglink\u0026#x2F;blob\u0026#x2F;master\u0026#x2F;SUBSTANCE.m...\u003c/a\u003e\u003cp\u003e[2] \u003ca href=\"https:\u0026#x2F;\u0026#x2F;news.ycombinator.com\u0026#x2F;item?id=10157018\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;news.ycombinator.com\u0026#x2F;item?id=10157018\u003c/a\u003e",
    "time": 1452281346
  },
  {
    "guid": "e413c020-e5ab-4340-82a7-ea4c79388ebe",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Learning C is intimidating to me because every time I see a post written by a long-time C programmer, there are 10 more long-time C programmers explaining how the post is incorrect. Most C books on Amazon have reviews wherein credible-sounding programmers criticize the mistakes of the author.\u003cp\u003eIf publishers and programmers with popular blogs can\u0026#x27;t get a consensus on what constitutes correct C, how could I ever hope to produce it?\u003cp\u003eCase in point \u003ca href=\"https:\u0026#x2F;\u0026#x2F;news.ycombinator.com\u0026#x2F;item?id=10864601\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;news.ycombinator.com\u0026#x2F;item?id=10864601\u003c/a\u003e",
    "time": 1452296909
  },
  {
    "guid": "9e0baa88-8a4a-4ea8-a2b9-d175b341c6db",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt;If you find yourself typing char or int or short or long or unsigned into new code, you\u0026#x27;re doing it wrong.\u003cp\u003eint is a type that\u0026#x27;s at least 16 bits large. I can\u0026#x27;t see the problem with using it. If I specify that I want a type that\u0026#x27;s 32 bits large, my code won\u0026#x27;t run on 16 bit systems.\u003cp\u003eWhy should I assume? Because the author doesn\u0026#x27;t believe in writing code that works on \u0026quot;20 year old systems\u0026quot;?",
    "time": 1452255608
  },
  {
    "guid": "6f330cfe-7e3c-4a9c-acad-67d95dd4e572",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "One point about char is that a pointer to a character type (character types are char, unsigned char, signed char - see 6.2.5.15) may alias non-char objects in a standard-compliant fashion (see 6.3.2.3.7). But uint8_t and int8_t may not necessarily be suitable replacements, because they are defined to be integer types (see B.19 - character types are a subset of integer types), and in any event may not even exist (7.20.1.1.3).",
    "time": 1452260212
  },
  {
    "guid": "9d085796-6975-4cfa-bf59-792926c4f192",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "As someone who has a been trying to get into modern C from higher level languages and looking for more modern sources than K\u0026amp;R, THANK YOU. (Even if you just posted the link here and have no relation to original author). (Of course, this post is not the only place to learn about modern C, but still, a very useful one).",
    "time": 1452255075
  },
  {
    "guid": "dc09d340-e93a-4a55-91ff-edf8a4e88a09",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt; LTO fixes the \u0026quot;source analysis and optimization across compilation units problem\u0026quot; by annotating object files with intermediate representation so source-aware optimizations can be carried out across compilation units at link time (this slows down the linking process noticeably, but make -j helps).\u003cp\u003emake -j doesn\u0026#x27;t help linking speed, unless multiple binaries are begin built.",
    "time": 1452255575
  },
  {
    "guid": "c6e909ea-bf86-4a2e-bf86-f63b2cd451b6",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "I wrote an assignment in C for Operating Systems in my second year of CS. I did it mostly for the challenge and ended up with a distinction grade.\u003cp\u003eIt was very challenging! I was learning how to do threading in C for what was one of the most complex assignments in my degree. However, I don\u0026#x27;t regret a moment of it. Even with a mark that was lower than my average programming assignment marks, I learned more in that assignment than I did in anything else while at uni.\u003cp\u003eBeing forced to RTFM because it wasn\u0026#x27;t abstracted away for you was exhilarating once I understood what was going on. And man, it was fast! Much faster than others who had programmed in Java.\u003cp\u003eI wish I had more reasons to write C, because I love it.",
    "time": 1452305558
  },
  {
    "guid": "a68e92f8-88b9-4076-b347-91f97fa46af9",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt;If you find yourself typing char [..] into new code, you\u0026#x27;re doing it wrong.\u003cp\u003e\u0026gt;The only acceptable use of char in 2016 is if a pre-existing API requires char (e.g. strncat, printf\u0026#x27;ing \u0026quot;%s\u0026quot;, ...) or if you\u0026#x27;re initializing a read-only string (e.g. const char \u003ci\u003ehello = \u0026quot;hello\u0026quot;;) because the C type of string literals (\u0026quot;hello\u0026quot;) is char \u003c/i\u003e.\u003cp\u003eHeh, basically you need to use \u0026#x27;char \u003ci\u003e\u0026#x27; for strings.  I would far prefer if strings were unsigned so that I could use \u0026#x27;uint8_t \u003c/i\u003e\u0026#x27;, but if you try it you\u0026#x27;ll get tons of conversion warnings and your code will look weird.",
    "time": 1452266737
  },
  {
    "guid": "2694c560-f3cf-40aa-8572-2b5f2266b6c1",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt; Use:\n\u0026gt; ptrdiff_t diff = (uintptr_t)ptrOld - (uintptr_t)ptrNew;\u003cp\u003eThe casts to uintptr_t are not needed in this case, as the result of subtracting two pointers already yields ptrdiff_t.\u003cp\u003eAlso, the mere subtraction of two pointers that do not point to the same \u0026quot;array object\u0026quot; yields undefined behaviour as per the standard.",
    "time": 1452263087
  },
  {
    "guid": "6b3dccf1-c6ca-49c1-8c46-8c7e116043cf",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Quite concise and short. Now wouldn\u0026#x27;t it be great to also have such a short guide for C++... (thinking about the tome that is \u003ca href=\"https:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;isocpp\u0026#x2F;CppCoreGuidelines\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;isocpp\u0026#x2F;CppCoreGuidelines\u003c/a\u003e)",
    "time": 1452256866
  },
  {
    "guid": "aef5619a-bd53-42f5-a9a0-835dbd878907",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Usually I find something very objectionable in these C guides, but I like this one, and it\u0026#x27;s hit some of my favourite\u0026#x2F;most hated bugbears. In recent years it\u0026#x27;s nearly driven me mad seeing people use the old types either directly or re-implementing their own equivalent of stdint.h, complete with all sorts of platform switching and other nonsense.\u003cp\u003eWe\u0026#x27;ve got these facilities, they\u0026#x27;re not exactly bleeding edge (the clue\u0026#x27;s in the name C99), let\u0026#x27;s use them!",
    "time": 1452261587
  },
  {
    "guid": "92ce4c3e-8b38-47c6-880b-fd3ab4918e60",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "One trick I\u0026#x27;ve been using a lot recently that saves me from forgetting to check error codes is the judicious use of __attribute__((__warn_unused_result__)) on functions that return an error code. It prevents you from being able to ignore the return value without doing something with it; even just assigning it to a variable and never checking the value in the variable isn\u0026#x27;t enough to silence the warning.",
    "time": 1452299936
  },
  {
    "guid": "83170a54-ce49-4ed0-9467-888d68983085",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Nice list!\u003cp\u003eI like using anonymous structs with variable initializers to provide parameters to functions with default values -- nice and clean!\u003cp\u003eC99 is not your grandparents\u0026#x27; C. It has kept up with the times.\u003cp\u003eA more thorough resource I cannot recommend highly enough: 21st Century C[0]\u003cp\u003e[0] \u003ca href=\"http:\u0026#x2F;\u0026#x2F;shop.oreilly.com\u0026#x2F;product\u0026#x2F;0636920033677.do\" rel=\"nofollow\"\u003ehttp:\u0026#x2F;\u0026#x2F;shop.oreilly.com\u0026#x2F;product\u0026#x2F;0636920033677.do\u003c/a\u003e",
    "time": 1452278617
  },
  {
    "guid": "bc80dddc-74b4-4237-8764-87babe2d7906",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "And then, someone points out that your code doesn\u0026#x27;t work in Visual Studio, and that, of course, you have to support VS \u0026lt; 2015.\u003cp\u003eSo, you\u0026#x27;re back to writing C89, in 2016.",
    "time": 1452265005
  },
  {
    "guid": "9dc9fd92-79fe-4746-981c-9180e69eb925",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "How to C in 2016: use valgrind from the start. I think that it\u0026#x27;s the best tool for C in the world.",
    "time": 1452264706
  },
  {
    "guid": "9497a3ca-5ef0-426e-84bd-3be9ba946084",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "For me, this is the most important bookmark of the year. Dropping back into C after using pre C11 it is tailor made for me. Covers all the areas I needed: Correct non-K\u0026amp;R datatypes, new formatting options, best practices on arrays. Awesome.",
    "time": 1452288064
  },
  {
    "guid": "19542c5f-ed55-42bc-813c-63059d750646",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "I refuse to believe that the wicked Buffer Overflow has completely stymied humanity.  Use array\u0026#x2F;string\u0026#x2F;buffer libraries.  They\u0026#x27;re very small and very easy to test.  Pass them around instead of a \u0026quot;char *\u0026quot; and a \u0026quot;size_t\u0026quot;.\u003cp\u003eNow, if you want to talk about signed overflow, bitwise operations on signed types, wacky undefined behavior, or memory management, that stuff is pretty hard to deal with in C.  But 99% of the time when people are shaking their fists at \u0026quot;shitty ol\u0026#x27; C ruining the Internet for everyone\u0026quot;, they mean buffer overflows, and it just shouldn\u0026#x27;t be an issue these days.",
    "time": 1452317652
  },
  {
    "guid": "f8c52661-17e8-44e4-ba98-f381ac0e3cd3",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "The clang-format wrapper script presented has a bug. The $@ at the end must be quoted for it to work on filenames containing spaces.\u003cp\u003eFor bonus points it shouldd prefix the clang-format command with \u0026quot;exec\u0026quot; but that\u0026#x27;s not a correctness issue.",
    "time": 1452267157
  },
  {
    "guid": "26af89ae-76c9-4ce3-adb1-73391fdb2945",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "The biggest failure of this article is the multiple admonishments \u0026quot;never do \u0026lt;blah\u0026gt; (except for this, this, and that other case over there\u0026quot; - all advice of this form is worthless when your supposed thesis is making code readable and consistent.\u003cp\u003eConsistency means avoiding special cases. Variable length arrays are too prone to special cases - IMO, just don\u0026#x27;t use them. malloc vs calloc is too prone to special cases, that rule is worthless. The rule \u0026quot;never use memset\u0026quot; is full of special cases, also worthless. (And in fact, for your larger automatic initializations, gcc just generates code to call memset anyway.) I would say \u0026quot;always use memset when you need zeroing - then you\u0026#x27;ll never be surprised.\u0026quot; The fewer special cases you have to keep track of, the better.\u003cp\u003e\u0026quot;Never cast arguments to printf - oh but for %p, always cast your pointers to (void *)\u0026quot; again, worthless advice with an unacknowledged special case.\u003cp\u003eThe way to write code that always works right is to always use consistent methodology and avoid any mechanism that is rife with special cases.\u003cp\u003eThe advice \u0026quot;always return \u0026#x27;true\u0026#x27; or \u0026#x27;false\u0026#x27; instead of numeric result codes\u0026quot; is worthless. Functions should always return explicit numeric result codes with explicitly spelled out meanings. enum is nice for this purpose because the code name is preserved in debug builds, saves you time when working inside a debugger. But most of all, it\u0026#x27;s a waste of time for a function to return a generic false\u0026#x2F;fail value which then requires you to take some other action to discover the specific failure reason. POSIX errno and Windows GetLastError() are both examples of stupid API design. (Of course, even this rule has an exception - if the function cannot fail, then just make it return void.)",
    "time": 1452432711
  },
  {
    "guid": "0f46d64c-d5ba-48eb-bdc4-a19ac1a1527a",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt; C99 allows variable declarations anywhere\u003cp\u003eI actually like declaring my variables at the top. To me, this seems more readable than searching for declaration statements throughout the code.\u003cp\u003eWhy should I not do this?",
    "time": 1452265507
  },
  {
    "guid": "93658a02-5a37-4d21-b9d1-cf23e0e6ea0a",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "This article focuses on clang and gcc, but note that MSVC\u0026#x27;s printf functions do not support %zu (or %zd) for size_t. MSVC uses %Iu. There is no standard \u0026quot;PRIuSIZE\u0026quot; macro for size_t, but Mozilla defines a polyfill for Firefox:\u003cp\u003e\u003ca href=\"https:\u0026#x2F;\u0026#x2F;hg.mozilla.org\u0026#x2F;mozilla-central\u0026#x2F;file\u0026#x2F;tip\u0026#x2F;mfbt\u0026#x2F;SizePrintfMacros.h\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;hg.mozilla.org\u0026#x2F;mozilla-central\u0026#x2F;file\u0026#x2F;tip\u0026#x2F;mfbt\u0026#x2F;SizePri...\u003c/a\u003e",
    "time": 1452279886
  },
  {
    "guid": "8dd7eb4d-a7ff-4623-9023-afda490f8796",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "I don\u0026#x27;t think the claim of zero performance penalty for calloc is true. If for example you\u0026#x27;re calling calloc on a game console it is 100% not true.",
    "time": 1452256457
  },
  {
    "guid": "ea8c0fd3-108c-447d-8d27-5330d3951925",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "In light of the fact that best practices have evolved considerably since K\u0026amp;R, what book(s) would you recommend for people wanting to learn C today?",
    "time": 1452264280
  },
  {
    "guid": "c1a3c710-c150-4742-aef4-d949699364b4",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Fantastic article. This is exactly how the language should be taught in university. \nAt least I wish I was taught to code like this in school.",
    "time": 1452278433
  },
  {
    "guid": "4674f29f-61f2-4b35-85d7-67fcf7bb6c91",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Having worked with a large code base, maintained over a period of time (25+) by multiple persons has learned me respect and that even old code have a value in virtue of being running without problems over time. A piece of software that is running without problems has a value in itself that have to be taken into account when considering the cost of maintenance.\u003cp\u003eRespect earlier developers and try to minimise _unnecessary_ changes that break version control history. Did earlier developers use names you don\u0026#x27;t like? Formatting you don\u0026#x27;t like? InconsistentCamelCasing or other_naming_paradigms you don\u0026#x27;t like? Let it be -- at least until you do a refactoring where _you_ claim responsibility.\u003cp\u003eIt may not be a good point to uncritically and retroactively apply the good points from the original article in an old code base.",
    "time": 1452345180
  },
  {
    "guid": "38023742-e02c-4fd3-9b6b-6f4906a30b42",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Is there any moral difference between using VLAs and calling alloca? Because alloca is generally recognized as evil.",
    "time": 1452266478
  },
  {
    "guid": "1c827afc-c473-48c4-9c15-334a5729a1dd",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "I thought `ssize_t` was only signed `size_t` in practice. Technically, it only needs to be `size_t` with -1.",
    "time": 1452266635
  },
  {
    "guid": "e8486442-dd89-4bb4-bdc2-2f389f229230",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Would love to see a discussion of build systems for modern code. Trying to decide between autoconf\u0026#x2F;cmake\u0026#x2F;scons\u0026#x2F;ninja\u0026#x2F;gyp for new projects is like flipping a coin... They all have their advantages and disadvantages and there is no clear winner.",
    "time": 1452282281
  },
  {
    "guid": "5be571af-066f-4f05-8e4a-bdfa6febc931",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "C (or C++) in 2016 and no mention of ASAN\u0026#x2F;UBSAN(\u0026#x2F;TSAN)? This seems like a must nowadays.",
    "time": 1452272918
  },
  {
    "guid": "43335484-c5c6-4842-9e37-e3fdfe8e6a88",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "After too many problems with \u0026quot;unfriendly C\u0026quot;, I finally gave in and now compile everything with -fno-strict-overflow (the Linux kernel does the same thing).  I don\u0026#x27;t care about architectures that don\u0026#x27;t use twos-complement.",
    "time": 1452257942
  },
  {
    "guid": "b8f8a0ba-14bd-4120-adf0-5e24a83da932",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "For an example of a high quality modern C api I highly recommend taking a look at libuv:\u003cp\u003e\u003ca href=\"http:\u0026#x2F;\u0026#x2F;libuv.org\u0026#x2F;\" rel=\"nofollow\"\u003ehttp:\u0026#x2F;\u0026#x2F;libuv.org\u0026#x2F;\u003c/a\u003e",
    "time": 1452277471
  },
  {
    "guid": "56e23342-17e3-46bb-827f-da8c9df447fd",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "# cc test.c -o test -O3 -Os -Wall -pedantic -Werror -Wshadow -Wstrict-aliasing -Wstrict-overflow -std=c99\u003cp\u003etest.c:1:2: error: #import is a GCC extension",
    "time": 1452262319
  },
  {
    "guid": "6ce198d7-a136-47d3-b835-bd2e3c99f05f",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Advice forgotten: \n- you should always avoid library whose API documentation are unaccessible or poorly written; \n- unix man page is a great format but windows has good help format too (synopsis, signature, use case, error handling, meaning of constants, caveats), \n- always check every function you are using from time to time ... human memory is not perfect, even open\u0026#x2F;calloc ....;\n- don\u0026#x27;t copy paste example code blindly from man or stackoverflow ... (I remember windows C++ doc having horrible example with bugs);\u003cp\u003eHave a reference to the norm easily accessible and don\u0026#x27;t use options of the compiler which impact you don\u0026#x27;t fully know.\u003cp\u003eMost developer are poorly understanding multithreading and it can be tricky to make a portable library that has this property. Don\u0026#x27;t hesitate to stipulate in your documentation that you did not cared about it, people can then use languages with GIL (ruby, python ...) to safely overcome this issue.\u003cp\u003eModern language are social, take advantage of sociability (nanomsg, swift, extension, #include \u0026quot;whatever_interpreter.h\u0026quot; ....).\u003cp\u003eProgramming in C with dynamic structures is guaranteed to be like a blind man walking in a mine field: you totally have the right either to make C extension to modern language OR include stuff like python.h and use python data structure managed by the garbage collector from C.\u003cp\u003eOld style pre allocated arrays may not be elegant, but that\u0026#x27;s how critical system avoid a lot of problems.\u003cp\u003eDO NOT USE MAGIC NUMBERS...\u003cp\u003eUSE GOTO for resource cleaning on error and make the label of the goto indentend at EXACTLY the same level the goto was written, especially when you have a resources that are coupled (ex: a file and a socket). Coupling should be avoid, but sometimes it cannot. Remember Djikstra is not that smart, he was unable to be a fully pledged physicist that can deal with the real world.\u003cp\u003eAvoiding the use of global variable is nice, but some are required, don\u0026#x27;t fall for the academic bias of hiding them to make your code look like it has none.\u003cp\u003eCopy pasting function is not always stupid (especially if you use only 1 clearly understandable function out of a huge library).\u003cp\u003eBe critical: some POSIX abstraction like threads seems to be broken by complexity: KISS.\u003cp\u003eModern C compiler are less and less deterministic, learn about C undefined behaviour and avoid clang or GNU specific optimisations and CHECK your code gives the same results with at least 2 compilers.\u003cp\u003eDon\u0026#x27;t follow advices blindly: there are some C capos out there that dream an ideal world. Code with your past errors in mind and rely on your nightmarish past experiences to guide you to avoid traps. Feeling miserable and incompetent is some time good.\u003cp\u003eResources are limited : ALWAYS check the results of resource exhaustion in C instead of relying on systems and always have error messages preallocated and preferably don\u0026#x27;t i18n them. Don\u0026#x27;t trust the OS to do stuff for you (closing files, SIGSEV\u0026#x2F;SEGFAULT ...).\u003cp\u003eKISS KISS KISS complexity is your enemy in C much more than in other languages. Modern C\u0026#x2F;C++ want you to build complex architecture on libraries that are often bloated (glibc).\u003cp\u003eEgyptians are nice looking.\u003cp\u003eOnce you finished coding you have done only the easy part in C:\n- dependency management is hard in C;\n- have a simple deterministic build chain;\n- you should write your man pages too;\n- you should aim at writing portable code;\n- static code analysis, maybe fuzzing, getting rid of all warnings is the last important part.\u003cp\u003eCoding in C is just about 15% of the time required to make great software. You will probably end up debugging it much more than you write it: write code for maintainability as your first priority and do not under any circumstances think that you can handle multiple priorities (memory use, speed, ...).\u003cp\u003eAbove all : just write maintainable code, please. This rule is the golden rule of C and it has not changed.",
    "time": 1452269425
  },
  {
    "guid": "0c3aaa26-b9bb-4319-a209-faf8d0026a73",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "2016 is my 40th year of using C.\nI prefer Java.",
    "time": 1452270263
  },
  {
    "guid": "95597dbd-db1f-4308-9a12-31389e32bc51",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026quot;The first rule of C is don\u0026#x27;t write C if you can avoid it.\u0026quot;\u003cp\u003eThis ought to carved into the walls of R\u0026amp;D departments everywhere.",
    "time": 1452255405
  },
  {
    "guid": "14c15392-c0b2-455d-952f-b5885cab01f4",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Is it better to fully qualify structs and unions or to hide their names by typedefs? I frequently see people hide all struct types because it\u0026#x27;s visual clutter and extra typing.\nIn other words, given some struct a, should I do:\ntypedef struct a a_t;\u003cp\u003eI realize this is a bit of a style question, but I\u0026#x27;m curious.",
    "time": 1452297835
  },
  {
    "guid": "82fe65e0-65b2-4195-8b43-8f1918bf8d67",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "My biggest tip for writing maintainable C for modern compilers is to avoid passing bare primitives between functions.  Don\u0026#x27;t just typedef - wrap things in (single-element) structs that describe the contents.  The compilers these days understand that they can boil off the wrapper when generating code.",
    "time": 1452279971
  },
  {
    "guid": "d0511f8d-78af-4aba-b86d-8a9e38fa1010",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "",
    "time": 1452280604
  },
  {
    "guid": "67add648-3edb-4ba1-9995-cce66d6be8a8",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "clang has a -Weverything flag that, unlike \u0026quot;-Wall\u0026quot;, will enable \u003ci\u003eall\u003c/i\u003e compiler warnings. This includes possibly contradictory warnings. :) For new C code, -Weverything is a good place to start.\u003cp\u003eUnlike gcc, clang does not have good documentation for its warning options. The best sources I\u0026#x27;ve found are the clang code itself (\u003ca href=\"https:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;llvm-mirror\u0026#x2F;clang\u0026#x2F;blob\u0026#x2F;master\u0026#x2F;include\u0026#x2F;clang\u0026#x2F;Basic\u0026#x2F;DiagnosticGroups.td\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;llvm-mirror\u0026#x2F;clang\u0026#x2F;blob\u0026#x2F;master\u0026#x2F;include\u0026#x2F;cla...\u003c/a\u003e) and \u003ca href=\"http:\u0026#x2F;\u0026#x2F;fuckingclangwarnings.com\u0026#x2F;\" rel=\"nofollow\"\u003ehttp:\u0026#x2F;\u0026#x2F;fuckingclangwarnings.com\u0026#x2F;\u003c/a\u003e.",
    "time": 1452279533
  },
  {
    "guid": "55d1399e-d0bb-422c-b749-c28d48eee256",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "I would add:\u003cp\u003e- Add security measures provided by your compiler to your builds: -fstack-protector-strong on GCC. -fsanitize=safestack on Clang if you have a version that\u0026#x27;s new enough.\u003cp\u003e- Build the program with AddressSanitizer and run it with typical data. Run it through a fuzzer afterwards.",
    "time": 1452263902
  },
  {
    "guid": "341cfcbc-d023-4223-a90a-e0e00c36733f",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026quot;How to C in 2016\u0026quot;  Don\u0026#x27;t.  C has outlived its usefulness.  It\u0026#x27;s time to move on to more expressive languages.  The fact that buffer overflows are still a thing in 2016 should be an embarrassment to the industry.",
    "time": 1452286459
  },
  {
    "guid": "a1e579f9-d07e-4ba5-b13d-9ce4e58cd8ff",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "C should have an inferred integer type:\u003cp\u003efor (infer x = 0; x != 10; ++x) ...\u003cp\u003eIf the compiler can infer the type, use the fastest integer.  If it can not infer, use the largest integer.\u003cp\u003eI\u0026#x27;m sure this would create difficulties with structs, but at least for local integers it would be nice.",
    "time": 1452263664
  },
  {
    "guid": "1fea4d4d-8b12-40ac-bc57-d0d6dd86e2fc",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt; For modern programs, you should #include \u0026lt;stdint.h\u0026gt; then use standard types.\u003cp\u003eUnless you\u0026#x27;re doing memory-mapped IO, or other very-specific things, you probably only need the \u003ci\u003e\u003c/i\u003e_least_t or \u003ci\u003e\u003c/i\u003e_fast_t types (int16_least_t, e.g.).",
    "time": 1452275445
  },
  {
    "guid": "aba98051-9295-4a4c-887e-2f30dc5159ab",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt; Formatting\u003cp\u003e\u0026gt; The solution here is to always use an automated code formatter.\u003cp\u003eSpot on. Python got that part right.",
    "time": 1452257786
  },
  {
    "guid": "b81d916d-482b-49a8-9eee-ed43b0a597a7",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt; It\u0026#x27;s important to not remain stuck in your\n \u0026quot;things I learned in the 80s\u0026#x2F;90s\u0026quot; mindset of C development.\u003cp\u003eInstead use C99 ... which is from 1999.\n(Yes, I know most people didn\u0026#x27;t learn it in the 90s)",
    "time": 1452270396
  },
  {
    "guid": "e791f500-2d69-44bd-b783-d8c8c771baca",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "",
    "time": 1452268684
  },
  {
    "guid": "808fc23d-c2d1-4a5f-9dd4-e8d825c7b83e",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "",
    "time": 1452268629
  },
  {
    "guid": "53e8ab61-69a9-43a3-8b04-cb390ede9b5e",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Wow, I wish I knew all of this when I started a big project last year... It\u0026#x27;s kinda hard to change it NOW. And with that I mean it would be endless rewriting of the entire thing.",
    "time": 1452300246
  },
  {
    "guid": "758074b2-ef6e-4daa-9730-0e1546026c5a",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026quot;generally you want -O2\u0026quot;\u003cp\u003eI see this a lot shouldn\u0026#x27;t O3 produce better optimizations?\nIs that people have large codebases? OR is it that O3 does some CPU\u0026#x2F;memory tradeoffs? OR something else?",
    "time": 1452259181
  },
  {
    "guid": "e251f377-7e91-4e5f-ad5c-119078b2913c",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "The article seems to be implying that you should use both -O2 and -Os, but these are mutually exclusive options - if you supply both, only the last one specified has effect.",
    "time": 1452258555
  },
  {
    "guid": "9e7159a1-93de-4e51-af04-193f71dbb62d",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "-Wextra is not enough.  Should also have: -Wconversion and -Wstrict-overflow=4\u003cp\u003eIn some ways -Wextra is too much: it\u0026#x27;s annoying that -Wall with -Wextra complain about unused parameters.",
    "time": 1452264453
  },
  {
    "guid": "fd7d076f-62cb-4337-b2f4-87f2ac64f6ac",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Never use int? Use uint8_t instead of char for strings? These are not best practices, this is a lot of terrible advice that will make many c people laugh at you.",
    "time": 1452266870
  },
  {
    "guid": "61b0f94a-e11c-41f6-a9a7-962beab483b9",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "",
    "time": 1452258285
  },
  {
    "guid": "d54322ec-58f5-4c18-9ffb-cdd1efe7d62d",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt; #define mycalloc(N) calloc(1, N)\u003cp\u003eI am not a fan of the use of macros here. You should never use macros.\u003cp\u003eInstead maybe: static inline void *mycalloc(size_t sz) { return calloc(1, sz); }",
    "time": 1452267638
  },
  {
    "guid": "141be5d3-6b2b-4d19-945c-9065ec5f74d0",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt; There\u0026#x27;s not much room for \u0026quot;casual observer C development.\u0026quot; For the rest of the world, that\u0026#x27;s why we have Erlang.\u003cp\u003elmaoed at that one",
    "time": 1452289537
  },
  {
    "guid": "4dcfbd1e-200c-468c-856d-64265a886861",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "C Programmers bragging about writing good C in this thread is just funny. A large majority of new code does NOT need to be written in C. There\u0026#x27;s nothing extra-ordinary about knowing how to write C. Learn to write HDL if you want to brag.",
    "time": 1452299973
  },
  {
    "guid": "76f04ef0-d61b-4c86-810b-0b68addfda73",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "",
    "time": 1452259387
  },
  {
    "guid": "2446ac52-7d32-4951-aea1-99d657e3351c",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Since I like coding in C, I am mildly offended by the notion that you should not write code in it, but I really enjoyed that all of these things were put together in one place.",
    "time": 1452278364
  },
  {
    "guid": "8ad42405-4c52-47dc-aa77-57b1bec49702",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  \u0026gt; Standard c99\n\u003c/code\u003e\u003c/pre\u003e\nIf you have to write C, why not go with ANSI C\u0026#x2F;C89 for compatibility\u0026#x2F;portability reasons?",
    "time": 1452264525
  },
  {
    "guid": "05ba568c-5518-4cff-a78c-35eb25d84f93",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Oh my goodness, so true.",
    "time": 1452260885
  },
  {
    "guid": "f312b5f2-1c6b-4b8c-acf4-5ee789bacd83",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "a rubbishy article",
    "time": 1452277022
  },
  {
    "guid": "843627f1-31c3-4b4f-896f-909d7b3bf878",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "Awesome Information in the post\u003cp\u003e\u003ca href=\"http:\u0026#x2F;\u0026#x2F;egovtjobs.in\u0026#x2F;\" rel=\"nofollow\"\u003ehttp:\u0026#x2F;\u0026#x2F;egovtjobs.in\u0026#x2F;\u003c/a\u003e",
    "time": 1452323602
  },
  {
    "guid": "5c5a28ff-4a2e-49f3-9bad-c00018c52db8",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "a rubbishy article",
    "time": 1452277017
  },
  {
    "guid": "0d811dfc-de60-451e-bffe-46e28aba1fd1",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026quot;How to C in 2016\u0026quot; Don\u0026#x27;t.",
    "time": 1452286396
  },
  {
    "guid": "2bcf27a0-a3fb-4820-8799-b851424114cd",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026quot;Notice we don\u0026#x27;t have char anymore. char is actually misnamed and misused in C.\u0026quot;\u003cp\u003eso defining a string happens how if not:\u003cp\u003echar *my_string = \u0026quot;Hello\u0026quot;;",
    "time": 1452255665
  },
  {
    "guid": "f0bc8661-65d8-4974-90b8-92804f4f0070",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt; \u003ci\u003eStandard C99\u003c/i\u003e\u003cp\u003eNo thanks; sticking to C90.\u003cp\u003e\u0026gt; \u003ci\u003eLTO\u003c/i\u003e\u003cp\u003eViolates ISO C, which says that semantic analysis is done in translation phase 7, and only linking takes place translation phase 8.",
    "time": 1452268093
  },
  {
    "guid": "1ed7e459-c293-458d-9278-2e28afba5dfc",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026quot;The first rule of C is don\u0026#x27;t write C if you can avoid it.\u0026quot;\u003cp\u003eEek! Not what I was expecting. In the video game world there is a not so small contingent of \u0026quot;write everything in C unless you have a really damn good reason not to\u0026quot;.\u003cp\u003eGreat post though. Now go forth into the world and write C, my friends!",
    "time": 1452267112
  },
  {
    "guid": "30343de1-27da-4d26-927d-e5a4be24b27f",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "\u0026gt; You continue arguing, \u0026quot;on a 32 bit patform I want 32 bit longs and on a 64 bit platform I want 64 bit longs!\u0026quot;\u003cp\u003eHa ha ha.  What kind of programmer would argue this?  Do they ignore Windows 64?  The type long is 32 bits there.",
    "time": 1452257338
  },
  {
    "guid": "3f11f031-a7ad-467a-9cf0-4bc5ec76b7f1",
    "article": "8ed2726a-ef66-415e-a34c-f715c7ccf12b",
    "text": "",
    "time": 1452268631
  },
  {
    "guid": "8af3e1b5-baf4-4f8d-a26e-036784f2d254",
    "article": "75e6d854-885f-44ae-9f03-0ee19db035c5",
    "text": "Fascinating.\u003cp\u003eI believe we\u0026#x27;re nowhere near a full understanding of the diversity of pre-H. sapiens species. Just last year the discovery of another Homo species, H. nadeli, was claimed [1]. I feel like we\u0026#x27;re going to keep finding more and more of these folks, and - like the Neanderthals and Denisovans - discovering through genetic analysis that we interbred [2].\u003cp\u003eAlso, the thing that complicates paleoanthropology, especially in regions like the Indonesian archipelago, is that most of the areas where prehuman Homo populations would have lived for significant lengths of time are now underwater.\u003cp\u003eFrustrating, but if we knew all the answers, what fun would that be?\u003cp\u003e[1] \u003ca href=\"http:\u0026#x2F;\u0026#x2F;www.theguardian.com\u0026#x2F;science\u0026#x2F;2015\u0026#x2F;sep\u0026#x2F;10\u0026#x2F;new-species-of-ancient-human-discovered-claim-scientists\" rel=\"nofollow\"\u003ehttp:\u0026#x2F;\u0026#x2F;www.theguardian.com\u0026#x2F;science\u0026#x2F;2015\u0026#x2F;sep\u0026#x2F;10\u0026#x2F;new-species-o...\u003c/a\u003e\n[2] \u003ca href=\"https:\u0026#x2F;\u0026#x2F;en.wikipedia.org\u0026#x2F;wiki\u0026#x2F;Archaic_human_admixture_with_modern_humans\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;en.wikipedia.org\u0026#x2F;wiki\u0026#x2F;Archaic_human_admixture_with_m...\u003c/a\u003e",
    "time": 1452734501
  },
  {
    "guid": "62a60466-eb0f-427a-affd-7311e77b1d32",
    "article": "75e6d854-885f-44ae-9f03-0ee19db035c5",
    "text": "\u0026quot;... perhaps descended from Homo erectus individuals washed eastward atop tsunami debris\u0026quot;\u003cp\u003eIs this really the general consensus about how pre homo sapiens human species traversed bodies of water?",
    "time": 1452729711
  },
  {
    "guid": "786ae76b-c257-4bba-a360-8409b4d7477b",
    "article": "2137f999-6b17-4359-a05c-934b1357ea05",
    "text": "Wow, perfect timing! I\u0026#x27;m currently writing my first lexer\u0026#x2F;parser in D as well (\u003ca href=\"http:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;landaire\u0026#x2F;hsc\" rel=\"nofollow\"\u003ehttp:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;landaire\u0026#x2F;hsc\u003c/a\u003e) for a Scheme-like language used in Halo 3. I found Rob Pike\u0026#x27;s talk on lexical scanning to be pretty useful (\u003ca href=\"https:\u0026#x2F;\u0026#x2F;www.youtube.com\u0026#x2F;watch?v=HxaD_trXwRE\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;www.youtube.com\u0026#x2F;watch?v=HxaD_trXwRE\u003c/a\u003e) and I\u0026#x27;ve modeled mine pretty heavily after the text\u0026#x2F;template lexer: \u003ca href=\"https:\u0026#x2F;\u0026#x2F;golang.org\u0026#x2F;src\u0026#x2F;text\u0026#x2F;template\u0026#x2F;parse\u0026#x2F;lex.go\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;golang.org\u0026#x2F;src\u0026#x2F;text\u0026#x2F;template\u0026#x2F;parse\u0026#x2F;lex.go\u003c/a\u003e.",
    "time": 1451332305
  },
  {
    "guid": "877ef241-5313-4ab7-9b02-bd698846ac9c",
    "article": "2137f999-6b17-4359-a05c-934b1357ea05",
    "text": "I\u0026#x27;ve never seen the D language before and I have to admit, it looks very elegant and has piqued my interest. Thanks for your post.\u003cp\u003eI\u0026#x27;m wondering why you used D rather than Rust? Was it just that you were curious about the D language or is there something about Rust that you don\u0026#x27;t like?",
    "time": 1451333706
  },
  {
    "guid": "0afc1a76-4753-4d9f-8aae-beb618127523",
    "article": "2137f999-6b17-4359-a05c-934b1357ea05",
    "text": "Another option is to use a lexer\u0026#x2F;state machine generator. Ragel support D and Rust (as of the not-quite-released v7) as target languages.",
    "time": 1451337689
  },
  {
    "guid": "6a1622cd-8fc2-4047-9496-91b98de31fad",
    "article": "2137f999-6b17-4359-a05c-934b1357ea05",
    "text": "Nice read! I\u0026#x27;d really like to know when we can expect the next post to be published.",
    "time": 1451507368
  },
  {
    "guid": "d7041752-6854-4b2c-ad6d-1b48d898668d",
    "article": "06500da3-f9b0-4731-b0fa-fbc6cbe8c155",
    "text": "Star Trek, on the other hand, consistently presents an optimistic view of our capacity for civilization. I love science-fiction, even when it\u0026#x27;s dystopian. But why does so much of it have to be dystopian?",
    "time": 1452738329
  },
  {
    "guid": "98cea7f2-6ca9-4940-87f5-b0b08c5b6f8d",
    "article": "604034ba-8975-4f13-a25c-23a30e35f40a",
    "text": "Might anyone have suggestions on where best to find delicious Iranian comfort food in the SF Bay area?  There are quite a few Persian restaurants, but I haven\u0026#x27;t found any of them to particularly stand out.  Personal recommendations from people who know the cuisine would be great.",
    "time": 1436306480
  },
  {
    "guid": "1a74cbc1-38c7-4646-86aa-e04ed0d2ec8f",
    "article": "604034ba-8975-4f13-a25c-23a30e35f40a",
    "text": "I skimmed down looking for recipes, but didn\u0026#x27;t see any.  I guess I should say that I didn\u0026#x27;t see any before it dimmed the article and interrupted me with a modal.\u003cp\u003eAnyway, if anyone has recipes they recommend, I\u0026#x27;m interested!",
    "time": 1436312015
  },
  {
    "guid": "85821fc8-5bd6-4927-8d5e-c0d2cb033250",
    "article": "604034ba-8975-4f13-a25c-23a30e35f40a",
    "text": "[meta] I know topics on HN have been getting pretty broad beyond tech and startups.  But, this is reeaaaalllly stretching...",
    "time": 1436307184
  },
  {
    "guid": "5e589bb3-d7a2-4f1f-88d3-d054ef4cac1d",
    "article": "cb2aec9f-f1d7-4732-a9c0-26206a813855",
    "text": "Important to remember for each data byte in the buffer to also store the LSR along with that data. Windows serial port driver fails to do this, meaning you can tell there was (for example) a parity error on a byte in your fifo, you just don\u0026#x27;t know on which byte.",
    "time": 1434059218
  },
  {
    "guid": "2db594c8-e41a-4598-afd0-328935f387ef",
    "article": "cb2aec9f-f1d7-4732-a9c0-26206a813855",
    "text": "The mix of global buffer and passed-in struct defining the buffer made me sad. So did the lack of atomic increments and decrements (volatile ain\u0026#x27;t sufficient). Don\u0026#x27;t get me started on the getchar routine.\u003cp\u003eThis stuff just isn\u0026#x27;t hard. Sigh.",
    "time": 1434073752
  },
  {
    "guid": "0d2305d1-8fb0-4b9e-bcfe-92454873b729",
    "article": "cb2aec9f-f1d7-4732-a9c0-26206a813855",
    "text": "There\u0026#x27;s at least 1 simple bug that I found: ring_buffer_get() returns an error code, but it\u0026#x27;s being ignored in uart_getchar().",
    "time": 1434077318
  },
  {
    "guid": "360b3858-b137-442a-b33d-aef00d49d39d",
    "article": "cb2aec9f-f1d7-4732-a9c0-26206a813855",
    "text": "Love seeing embedded stuff on HN!",
    "time": 1434056077
  },
  {
    "guid": "7a4ec0cd-fd1d-4311-91d9-22e0b96c9b4c",
    "article": "7315c9ce-ed50-4993-919f-10246c7e6e66",
    "text": "\u0026#x27;Use tagged literals for struct initializations\u0026#x27;... I\u0026#x27;d rather the compiler help me make sure i\u0026#x27;ve updated all uses appropriately when I add a new field.",
    "time": 1434338586
  },
  {
    "guid": "466e1bc2-5373-4c2f-8e46-840960fc2a2d",
    "article": "7315c9ce-ed50-4993-919f-10246c7e6e66",
    "text": "#8 is pretty great in that you can assign methods to custom types but not builtins.\u003cp\u003eAs an example, say I have []Card. If I want to sum all cards with a certain color then I could\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  Sum(cards []Card, color string)\n\u003c/code\u003e\u003c/pre\u003e\nbut that is not great. Rather, I could use\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  type Cards []Card\n\u003c/code\u003e\u003c/pre\u003e\nand then name a method\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  (cards *Cards) Sum(color string) int\n\n\u003c/code\u003e\u003c/pre\u003e\nThe benefit is that any []Card can now have Sum called on it without any explicit casting.\u003cp\u003eI\u0026#x27;ve been using this and find it to be clean.",
    "time": 1434342494
  },
  {
    "guid": "e70baf7a-1e63-4ec8-a5db-e3913e57832a",
    "article": "7315c9ce-ed50-4993-919f-10246c7e6e66",
    "text": "Great article, especially #2. I found it strange how they didn\u0026#x27;t mention the stringer tool[1] in #5 though.\u003cp\u003e[1]: \u003ca href=\"https:\u0026#x2F;\u0026#x2F;godoc.org\u0026#x2F;golang.org\u0026#x2F;x\u0026#x2F;tools\u0026#x2F;cmd\u0026#x2F;stringer\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;godoc.org\u0026#x2F;golang.org\u0026#x2F;x\u0026#x2F;tools\u0026#x2F;cmd\u0026#x2F;stringer\u003c/a\u003e",
    "time": 1434349188
  },
  {
    "guid": "f9aa2bfe-5ac3-44e8-8e27-d5e429be508d",
    "article": "7315c9ce-ed50-4993-919f-10246c7e6e66",
    "text": "Regarding #6, starting with 1 is better than starting with 0, but even better is using negative values: \u003ca href=\"http:\u0026#x2F;\u0026#x2F;play.golang.org\u0026#x2F;p\u0026#x2F;ES8nNv4PeW\" rel=\"nofollow\"\u003ehttp:\u0026#x2F;\u0026#x2F;play.golang.org\u0026#x2F;p\u0026#x2F;ES8nNv4PeW\u003c/a\u003e\u003cp\u003eAlso regarding #6, the author didn\u0026#x27;t say it, but with iota is really trivial to create power of two constants, so you can combine them: \u003ca href=\"http:\u0026#x2F;\u0026#x2F;play.golang.org\u0026#x2F;p\u0026#x2F;rzD3Vl0C4q\" rel=\"nofollow\"\u003ehttp:\u0026#x2F;\u0026#x2F;play.golang.org\u0026#x2F;p\u0026#x2F;rzD3Vl0C4q\u003c/a\u003e\u003cp\u003eFor #5, he should have mentioned the stringer tool to maintain the list of strings for you: \u003ca href=\"https:\u0026#x2F;\u0026#x2F;godoc.org\u0026#x2F;golang.org\u0026#x2F;x\u0026#x2F;tools\u0026#x2F;cmd\u0026#x2F;stringer\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;godoc.org\u0026#x2F;golang.org\u0026#x2F;x\u0026#x2F;tools\u0026#x2F;cmd\u0026#x2F;stringer\u003c/a\u003e\u003cp\u003e#10 really depends. There are many cases where you want to wrap your map, but there are many other cases (more cases dare I say), where it doesn\u0026#x27;t really matter because you only use the map (which is embedded in s struct) in very few places (basically some methods of that struct).\u003cp\u003eThe example also fails to synchronise reads.\u003cp\u003eA more important case that is not mentioned is that if you often initialise once and read many times, without ever writing again, you don\u0026#x27;t need that kind of wrapper in those scenarios.\u003cp\u003eAnd you also don\u0026#x27;t want that kind of wrapper even if you read and write often, but read more than one value at a time. That hurts performance, but can even limit your available semantics. With an explicit lock you can arrange so that your map presents a consistent snapshot at all times.",
    "time": 1434361201
  },
  {
    "guid": "923d6672-56b1-4393-ad08-874dccc08ae8",
    "article": "7315c9ce-ed50-4993-919f-10246c7e6e66",
    "text": "The shown label example for #2 is only one option, you could also use a simple loop:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e    for loop := true; loop; {\n        select {\n        case \u0026lt;-time.After(time.Second):\n            fmt.Println(\u0026quot;hello\u0026quot;)\n        default:\n            loop = false\n        }\n    }\n    fmt.Println(\u0026quot;ending\u0026quot;)\u003c/code\u003e\u003c/pre\u003e",
    "time": 1434383005
  },
  {
    "guid": "cfe31aa2-15d4-4d7a-bc2d-64ed54a40193",
    "article": "7315c9ce-ed50-4993-919f-10246c7e6e66",
    "text": "\u003cp\u003e\u003cpre\u003e\u003ccode\u003e  type T struct {\n      Foo string\n      Bar int\n      Qux string\n  }\n  \n  t := T{\u0026quot;example\u0026quot;, 123} \u0026#x2F;\u0026#x2F; doesn\u0026#x27;t compile\n  t := T{Foo: \u0026quot;example\u0026quot;, Bar: 123} \u0026#x2F;\u0026#x2F; OK\n\u003c/code\u003e\u003c/pre\u003e\nI find this behavior somewhat surprising. Contrary to the author\u0026#x27;s claim, I would expect \u003ci\u003eboth\u003c/i\u003e to fail to compile.\u003cp\u003eReading the Go specification, it seems to be a valid behavior.\u003cp\u003e\u0026gt; An element list that contains keys does not need to have an element for each struct field. Omitted fields get the zero value for that field.[1]\u003cp\u003eI understand zeroing out the \u0026quot;unused\u0026quot; fields is common in low level programming, but Go\u0026#x27;s behavior in this specific case feels a bit too implicit for my taste.\u003cp\u003e[1] \u003ca href=\"https:\u0026#x2F;\u0026#x2F;golang.org\u0026#x2F;ref\u0026#x2F;spec\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;golang.org\u0026#x2F;ref\u0026#x2F;spec\u003c/a\u003e",
    "time": 1434339125
  },
  {
    "guid": "919b229d-a8ae-4c4b-95c4-9f3cf09ff7f1",
    "article": "7315c9ce-ed50-4993-919f-10246c7e6e66",
    "text": "I disagree with #3.\u003cp\u003eIf I change a data structure I want the compiler to tell me exactly which parts of the code I should rethink. I do not want it to silently initialize new fields with automatic values, as that may invalidate some of my invariants.\u003cp\u003eConfusingly, it seems that the author is aware us this issue, as he acknowledges exactly this issue #6, and provided a recommendation for easier debugging of such situations.",
    "time": 1434377982
  },
  {
    "guid": "7f8e811d-5be9-428c-b2df-9d6346a7cc2e",
    "article": "7315c9ce-ed50-4993-919f-10246c7e6e66",
    "text": "Re #7: Why have a function wrap it at all if all you\u0026#x27;re going to do is return the function?",
    "time": 1434380067
  },
  {
    "guid": "8e41a2bf-9310-4abb-bc9a-16fd2aa62697",
    "article": "7315c9ce-ed50-4993-919f-10246c7e6e66",
    "text": "Lots of gems of good advice here!\u003cp\u003eNot sure I agree about #7 though, as I prefer the more\nexplicit and log friendly approach of not returning function call results directly.",
    "time": 1434341790
  },
  {
    "guid": "467882a1-fedf-4538-8114-3543e7d48273",
    "article": "7315c9ce-ed50-4993-919f-10246c7e6e66",
    "text": "Yes, and no.\u003cp\u003e#3 - (\u0026quot;T{A:1, B:2} is better than T{1, 2}\u0026quot;) - usually yes, and you\u0026#x27;d want to write it multi-line for readability etc (see #4); but there are times, when you exactly \u003ci\u003ewant\u003c/i\u003e to benefit from the fact, that T{1, 2} is verified for completeness. And sometimes it can read better in table tests. (\u003ci\u003eSometimes.\u003c/i\u003e Only sometimes.)\u003cp\u003e#5 - as others said already, you can be smart and spare yourself some dumb work here and use golang.org\u0026#x2F;x\u0026#x2F;tools\u0026#x2F;cmd\u0026#x2F;stringer + go generate.\u003cp\u003e#6 - even \u003ci\u003ebetter\u003c/i\u003e: start from 0, and make sure the 0 value is correct as the default value for unitialized variable\u0026#x2F;field! E.g.:\u003cp\u003e\u003cpre\u003e\u003ccode\u003e    const (\n        Stopped State = iota\n        Running\n        Rebooting\n        Terminated\n    )\n    \u0026#x2F;\u0026#x2F; That said, this is assuming the \u0026quot;Stopped\u0026quot; can also mean \u0026quot;pre-running\u0026quot;.\n    \u0026#x2F;\u0026#x2F; Otherwise, add a named \u0026quot;Uninitialized\u0026quot; state, or something.\n\u003c/code\u003e\u003c/pre\u003e\n#7 - I believe sometimes yes, sometimes not. Especially in longer functions, for the sake of \u0026quot;no surprises\u0026quot;, it might be easier for readers to just keep multiple boring (read: regular) \u0026quot;return 0, err\u0026quot; blocks, and final \u0026quot;return x, nil\u0026quot;. Also, it\u0026#x27;s then slightly easier to add more code to such a function (in growing codebase), and\u0026#x2F;or refactor it. Still, for cases when this results in a concise one-liner, totally yes!\u003cp\u003e#9 - as Author notes at the end, \u0026quot;This approach has the disadvantage that it pushes out the indentation and makes it harder to read. Again seek always the simplest solution.\u0026quot; In my opinion, nice trick to know, but usually a \u0026quot;x := NewContext(...); defer x.Close()\u0026quot; or similar is the standard idiom.\u003cp\u003eNOTE: \u003ci\u003eEspecially\u003c/i\u003e for locks, I\u0026#x27;d say you \u003ci\u003ewon\u0026#x27;t\u003c/i\u003e be adding anything to the block in future (see also: YAGNI). On the contrary, you might actually want to change it to a RWLock at some point, and then modify only some of the uses, and then the func would actually make it more annoying.\u003cp\u003e#10 - I\u0026#x27;d say, only when you need it. If you don\u0026#x27;t need the lock, just use the map. If you need the lock... usually, I\u0026#x27;d think you probably already have some higher level meaning for the \u0026quot;map\u0026quot;, so I\u0026#x27;d suggest to already wrap it in a proper type name \u0026amp; higher-level interface. \u0026quot;type FooRegistry { ... }; func (r * FooRegistry) Register(...)\u0026quot; etc. (And, actually, probably don\u0026#x27;t add the Delete() yet, until you really need it.) And probably you already have more complexity at this point that you\u0026#x27;ll want to nicely encapsulate in those funcs.\u003cp\u003eThat said, all of the above is just my subjective opinion, too.\u003cp\u003e\u0026quot;#11\u0026quot; - By the way: if you\u0026#x27;re able to force yourself to use vim, absolutely have a look at the Author\u0026#x27;s \u003ca href=\"https:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;fatih\u0026#x2F;vim-go\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;github.com\u0026#x2F;fatih\u0026#x2F;vim-go\u003c/a\u003e plugin. Especially with full oracle support, it\u0026#x27;s a \u003ci\u003ekiller\u003c/i\u003e.",
    "time": 1434364088
  },
  {
    "guid": "8d3a7d99-1057-4b37-9838-14cd21aeb6c0",
    "article": "7315c9ce-ed50-4993-919f-10246c7e6e66",
    "text": "These are excellent tips.",
    "time": 1434379905
  },
  {
    "guid": "1b1e937b-8521-4c88-a13c-105d421ea030",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "I believe the premise to be false, while it is true that you can eat many different \u0026quot;weeds\u0026quot; I cannot find any methodology or theory where that doing so increases the efficiency of land use. There are some key things like nutrients in == nutrients out and digestibility in humans which is not a given.\u003cp\u003eThat said, there were some interesting recipes for what are nominally weeds in the Foxfire[1], and Euell Gibbons books[2] which were certainly edible although nothing I\u0026#x27;ve tried really struck me as exceptional. As Boy Scouts we got a merit badge for creating a meal out of locally harvested plants, that was fun.\u003cp\u003e[1] \u003ca href=\"http:\u0026#x2F;\u0026#x2F;www.foxfire.org\u0026#x2F;thefoxfirebooks.aspx\" rel=\"nofollow\"\u003ehttp:\u0026#x2F;\u0026#x2F;www.foxfire.org\u0026#x2F;thefoxfirebooks.aspx\u003c/a\u003e\u003cp\u003e[2] \u003ca href=\"http:\u0026#x2F;\u0026#x2F;www.amazon.com\u0026#x2F;Euell-Gibbons-Handbook-Edible-Plants\u0026#x2F;dp\u0026#x2F;0915442787\" rel=\"nofollow\"\u003ehttp:\u0026#x2F;\u0026#x2F;www.amazon.com\u0026#x2F;Euell-Gibbons-Handbook-Edible-Plants\u0026#x2F;d...\u003c/a\u003e",
    "time": 1428172888
  },
  {
    "guid": "1ffa59ea-1b62-41fe-87c3-98ec6901d768",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "Something to keep in mind here is that once a viable market is found then the product will be fully commercialised and mass-produced.  No longer will poor conditions be good enough when compared to the yield you get from ideal conditions.\u003cp\u003eThen we will start fertilising them, then tweaking the seeds etc etc etc. And before long it will be just like anything else grown on the land.",
    "time": 1428188859
  },
  {
    "guid": "df0e5299-7f21-4c91-8af0-82ea6ead80f9",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "Right place, right time, right plant. Don\u0026#x27;t eat weeds from places where they may have been sprayed by pesticides or pets. I put dandelion (literally \u0026quot;teeth of the lion\u0026quot; or dans de lion in french) in my smoothies weekly. It\u0026#x27;s pretty bitter and tastes of the earth, so if you make a smoothie use copious amounts of lemon juice and\u0026#x2F;or orange juice to make it taste a little bit better. There are all sorts of little-known health benefits to dandelion. They are PACKED with all sorts of nutrients. People even grow them deliberately in gardens in Europe. Some people also make dandelion wine and dandelion coffee. Google this stuff - you might be surprised. In an abstract sense weeds are a bit like startups because they take unwanted resources (heat, light, soil, space) and \u0026#x27;add value\u0026#x27; through unique processes e.g. photosynthesis to turn them into something else. In a strange way I find weeds inspiring.",
    "time": 1428173112
  },
  {
    "guid": "45801f03-dca0-40ae-b1d0-0db736642689",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "One of my favorites is rucola\u0026#x2F;arugula - it\u0026#x27;s a weed but it\u0026#x27;s really quite nice in a salad. Very strong nutty flavor.\u003cp\u003eYou can buy a cultivated version in in supermarkets here (NL) but it\u0026#x27;s nowhere near as strong.\u003cp\u003ePeppermint + spearmint are also weeds which are commonly grown for use in cooking or tea.",
    "time": 1428178227
  },
  {
    "guid": "534abac5-d1ce-4208-b8bd-709890357b75",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "It is a very interesting topic beyond food.\u003cp\u003eWhen I first came to America, I was surprised and confused by the lack of diversity on vegetables in grocery stores. Around the small Midwest town I lived, there were many weeds that look edible. I had never heard any local Americans eat them, though. I thought it was simply because there were a surplus of food  in America.\u003cp\u003eMany many years passed. In our backyard, there are many weeds that look edible. I have tried only two, dandelion and a kind of fern. I hesitate on the others, although some looks similar to what I had eaten before. I am concerned they might cause health issues, from minor stomach discomfort to serious food poisoning.\u003cp\u003eIt is not like I had no experience in forage. I regularly foraged for weeds, ferns, mushrooms when I was a child. I love them better than carrots, celeries, cabbages, etc. They simply tasted better. But I hesitate at the weeds and mushrooms in my backyard.\u003cp\u003eWhenever I see some new vegetables in the fantastic Berkeley Bowl, I will get some, google recipes, and try them. Whenever I see these weeds in restaurant menu, I will order to have a try. First, because I love trying new things. Second, I believe it is sustainable, both from where I grow up and from my education. But I still hesitate at the weeds and mushrooms in my backyard.\u003cp\u003eOne can explain it from the point of view of evolution. Somehow, I feel it is more than that.",
    "time": 1428175972
  },
  {
    "guid": "ab92603a-8de7-42b6-8974-c4086c669776",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "Is there any good information about the nutritional content and popular weeds and what they taste like?",
    "time": 1428172762
  },
  {
    "guid": "413625a3-ae7b-43cb-8be8-e8431eca2ffb",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "Pretty interesting, but you do have to be careful with eating a number of \u0026quot;weeds\u0026quot; that grow everywhere.  A good friend of mine in high school ended up strapped down to a gurney for a few days after overdosing on jimsonweed.  He was never quite right after that.",
    "time": 1428171544
  },
  {
    "guid": "d6d431fe-15e4-45bc-b8a6-6c75301f9e90",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "I know a fair number of old-timers that still eat dandelion greens and fiddleheads and pigweed.  Fortunately, New England is a place with few very poisonous things, although it is important to check that you are picking fiddleheads and not wood ferns...",
    "time": 1428172758
  },
  {
    "guid": "332e120c-88e8-4733-bde5-a313d33fba08",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "Here\u0026#x27;s a YouTube channel of a guy eating all sorts of foraged weeds and plants.\u003cp\u003e\u003ca href=\"https:\u0026#x2F;\u0026#x2F;youtube.com\u0026#x2F;user\u0026#x2F;EatTheWeeds\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;youtube.com\u0026#x2F;user\u0026#x2F;EatTheWeeds\u003c/a\u003e",
    "time": 1428185406
  },
  {
    "guid": "d995a642-6c50-4804-b94c-4d063ba5dbef",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "The problem with eating weeds is that people spray them with toxins which aren\u0026#x27;t meant for things humans are going to eat. Do they wash off? Who knows? They haven\u0026#x27;t been evaluated for that use-case.",
    "time": 1428200739
  },
  {
    "guid": "e88cfd9f-59a9-4f7a-bb5e-a0230244cc09",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "",
    "time": 1428172743
  },
  {
    "guid": "58cc1988-a174-47aa-abb5-e8c413d09417",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "A fun little video I made of a foraged brunch I attended last year:\u003cp\u003e\u003ca href=\"https:\u0026#x2F;\u0026#x2F;www.youtube.com\u0026#x2F;watch?v=VpvKl11FABk\" rel=\"nofollow\"\u003ehttps:\u0026#x2F;\u0026#x2F;www.youtube.com\u0026#x2F;watch?v=VpvKl11FABk\u003c/a\u003e",
    "time": 1428193179
  },
  {
    "guid": "8ae14262-1218-4e67-9037-cee6c425d70a",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "\u0026quot;Open Source\u0026quot; Food is name only- they demand a $15 donation to see their field guide. Until then, good luck not eating something toxic.",
    "time": 1428178518
  },
  {
    "guid": "a188c10b-e7c1-41e9-a403-49b0be8539f2",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "Rooted words. Appeal-to-marginality is reasonable and sensible enough for locating empathy,when we barely have social systems try to make dots between the lines.",
    "time": 1428171250
  },
  {
    "guid": "9f048795-a467-435f-ae18-78ad04bc12ec",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "When I was a child I ate weeds. It made everyone stop talking to me on the playground. It was pretty great.",
    "time": 1428188341
  },
  {
    "guid": "587b528f-f4fe-4620-959e-f0d087c97348",
    "article": "049cd8fc-a66b-4a3d-956b-7c2ab5fb9c5d",
    "text": "The premise that weeds are a suitable food for humans is wrong. Most of these plants are loaded with toxins. You can\u0026#x27;t eat them in any quantity for calories without getting poisoned.\u003cp\u003eCows and goats and sheep can eat these things, though, because they have more advanced digestive systems. The udder provides an added toxin filtration system.\u003cp\u003eIn theory you might be able to design an efficient system to detoxify wild plants such as grass and weeds directly into a high quality human food. At this moment cheese is already an incredibly effective way to use wild forage to make human food.",
    "time": 1428192718
  }
]
